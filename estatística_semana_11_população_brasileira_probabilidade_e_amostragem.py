# -*- coding: utf-8 -*-
"""Estatística_Semana 11 - População Brasileira- Probabilidade e Amostragem

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14yM19T2kqANJFORU_LqVP2e75LbN7vs2
"""

#importndo as bibliotecas
import pandas as pd
import numpy as np
import seaborn as sns
import statistics as st
import matplotlib.pyplot as fig
from scipy.stats import norm

df_populacao = pd.read_csv("populacao_brasileira.csv")

df_populacao.head(20)

"""1.Considere pessoas fluentes em inglês, qual a probabilidade
complementar? Ou seja, qual a probabilidade de escolhermos uma
pessoa aleatória e ela não ser fluente em inglês. Considere fluente
quem tem o nível avançado
"""

total_pp= len(df_populacao["estado"])

contagem_proficiencia = df_populacao["nível de proficiência em inglês"].value_counts()

# Get the count of people with advanced English proficiency ("avançado")
if "Avançado" in contagem_proficiencia:
    pessoas_ingles_avancado = contagem_proficiencia["Avançado"]
else:
    pessoas_ingles_avancado = 0

print("Número de pessoas com inglês avançado:", pessoas_ingles_avancado)

#Calculando probabilidade de pessoa com inglês avançado
prob_ingles_adv = pessoas_ingles_avancado/total_pp

prob_ingles_adv

#calculando probalilidade de se escolhermos uma pessoa aleatoria ela não ser fluente em inglês:
prob_nao_fluente = 1- prob_ingles_adv

print("A probalilidade de escolher uma pessoa aleatória e ela não ser fluente em inglês é:", round(prob_nao_fluente,2)*100 )

"""2.Se uma pessoa escolhida aleatoriamente for de Alagoas ou do Pará,
qual é a probabilidade de ela ter uma renda superior a 5 mil reais?
"""

''' pessoa escolhida de alagoas ou Pará,
'' renda acima de 5 mil reais'''
# Selecionar linhas do dataframe onde o estado é PA OU AL
total_estado_PA_AL = df_populacao[df_populacao['estado'].isin(['PA', 'AL'])]
#tamnho do novo dadtaframe
tam_total_estado_PA_AL = len(total_estado_PA_AL)
#filtrando a renda maior que 5000
filtro_estado_PA_AL_renda = [renda for renda in total_estado_PA_AL['renda'] if renda > 5000]
tam_filtro_estado_renda = len(filtro_estado_PA_AL_renda)
#calculando a probabilidade
prob_PA_AL_renda = round(tam_filtro_estado_renda/tam_total_estado_PA_AL*100, 2)

prob_PA_AL_renda

"""3.Descubra a probabilidade de uma pessoa ter ensino superior completo
no estado do Amazonas. Qual a probabilidade da quinta pessoa que
você conversar, que é amazonense, ter ensino superior completo?
"""

# Filtra dataframe para individuos que moram no estado do Amazonas
total_estado_AM = df_populacao[df_populacao['estado'] == 'AM']
# Calcular o total de amazonenses
tam_estado_AM = len(total_estado_AM)
#Quandidade de amazonenses que possuem o ensino superior.
x= [escolaridade for escolaridade in total_estado_AM['escolaridade'] if escolaridade == 'Superior' or escolaridade == "Pós-graduação"]
tam_ensino_superior = len(x)
#probablidade de probabilidade de uma pessoa ter ensino superior completo no estado do Amazonas.Valor arrendodado
prob_superior_Am = round(tam_ensino_superior/tam_estado_AM, 2)

prob_superior_Am

# probabilidade de uma pessoa não ter ensino superior completo no amazonas
Prob_sem_ensino_superior= 1- prob_superior_Am

#a probabilidade da quinta pessoa que você conversar, que é amazonense, ter ensino superior completo?

prob_pessoa_ensino_superior = Prob_sem_ensino_superior* Prob_sem_ensino_superior* Prob_sem_ensino_superior * Prob_sem_ensino_superior * prob_superior_Am

round(prob_pessoa_ensino_superior,3)
# ou
Alternativa_prob_5pessoa_ensino_superior = round((1 - prob_superior_Am) ** 4 * prob_superior_Am)

from scipy.stats import binom

# Definindo os parâmetros
n = tam_estado_AM  # Número total de pessoas amazonenses
p = round(prob_superior_Am,2)  # Probabilidade de uma pessoa amazonense ter ensino superior completo
k = 1  # Número de sucessos desejados (a quinta pessoa ter ensino superior completo)

binom.pmf(k, n, p)

"""4.Considerando a renda das pessoas do nosso conjunto, podemos dizer
que a renda de uma pessoa brasileira está na sua maioria em que faixa
(faça faixa de 1.500 reais)? Qual é a sua função densidade de
probabilidade?:
"""

'''- bins -- 15000

faixa 1 --[0 --1500[
faixa 2 -- ]1500 --- 3000]
faixa 2 --]3000 -- 4500]
faixa 3 --]4500 -- 5500]

'''

import matplotlib.pyplot as plt
# Encontrando a  Renda mínima e máxima
min_renda = df_populacao['renda'].min()
max_renda = df_populacao['renda'].max()

#Ecnontrando o número de faixas
num_faixas = int((max_renda - min_renda) / 1500) + 1


#Calculando o intervalo das faixas
intervalos = [min_renda + 1500 * i for i in range(num_faixas)]

intervalos.append(max_renda + 1)

#Criando o histograma
plt.hist(df_populacao['renda'], bins=intervalos, edgecolor='black')

# Adicionando rótulos e título
plt.xlabel('Renda')
plt.ylabel('Frequência')
plt.title('Histograma de Renda')

# Exibindo o histograma
plt.show()

frequencias, _ = np.histogram(df_populacao['renda'], bins=intervalos)

for i, frequencia in enumerate(frequencias):
    print(f'Faixa {i+1}: {frequencia} números')



"""5. Calcule a média e a variância da renda da amostra. Depois faça a
distribuição normal, inclua o gráfico.

"""

# calculando a média e a variância da amostra por fórmula
media_renda = df_populacao['renda'].mean()
media_renda

variancia_renda = df_populacao['renda'].var()

print(f'A média é {media_renda:.2f} e a variância é de {variancia_renda:.2f}')

# calculando a média e a variância da amostra sem fórmula.


media_renda_sem_formula =sum(df_populacao['renda'])/len(df_populacao['renda'])

variancia_sem_formula = sum((x - media_renda) ** 2 for x in  df_populacao['renda']) / len(df_populacao['renda'])


print(f'A média é {media_renda_sem_formula:.2f} e a variância é de {variancia_sem_formula:.2f}')

#distruibição normal-- utilizando média e a variância calculadas por fórmulas.

# Histograma com a curva da distribuição
sns.histplot(df_populacao['renda'], kde = True, discrete = False)

# Curva da distribuição
sns.kdeplot(data = df_populacao['renda'])

desvio_padrao = df_populacao['renda'].std()

# Gerando gráficos

fig.subplot(212)
fig.hist(df_populacao['renda'], bins = 50, density=True)

eix = np.linspace(min_renda,max_renda,100)
eiy = norm.pdf(eix,media_renda,desvio_padrao)
fig.plot(eix, eiy, color = 'black')

"""6.Primeiro considere a probabilidade encontrada no nosso conjunto de
pessoas com escolaridade de pós-graduação. Considerando a amostra
de população brasileira com 1 milhão de habitantes, qual a
probabilidade de encontrarmos 243 mil pessoas com pós-graduação?
"""

# Tamanho do nosso conjunto de pessoas
tam_df_escolaridade = len(df_populacao['escolaridade'])

# Tamanho do nosso conjunto de pessoas com pós-graduação
pos_graduacao = df_populacao[df_populacao['escolaridade'] == "Pós-graduação"]
tam_pos_graduacao = len(pos_graduacao)
tam_pos_graduacao

#probabilidade
probabilidade_posgraduacao_amostra = (tam_pos_graduacao/ tam_df_escolaridade)

novo_tamanho_populacao = 1000000
novo_num_pessoas_pos_graduacao = 243000

prob_pos_gradruacao_1Mhabitantes= binom.pmf(novo_num_pessoas_pos_graduacao, novo_tamanho_populacao, probabilidade_posgraduacao_amostra)

prob_pos_gradruacao_1Mhabitantes

"""7.Somando as densidades nós temos a função de densidade acumulada.
Considerando a coluna ‘Escolaridade’ faça a função de densidade
acumulada discreta para cada nível de escolaridade.
"""

frequencia_absoluta = df_populacao['escolaridade'].value_counts()



densidade_discreta = frequencia_absoluta / len(df_populacao)

densidade_acumulada=densidade_discreta.cumsum()

print(densidade_acumulada)
print(densidade_discreta)


plt.plot(densidade_acumulada.index, densidade_acumulada.values, marker='o', linestyle='-')


plt.xlabel('Renda')
plt.ylabel('Frequência')
plt.title('Histograma de Renda')

plt.show

"""8.Qual a margem de erro amostral da proporção populacional
considerando a proporção de pessoas com nível de inglês
intermediário?
"""



"""9.Calcula a renda da população. Qual a probabilidade de encontrar 60
pessoas com uma renda mil reais superior à média?


---



"""

renda_total=  df_populacao['renda']
renta_total.mean()
 x =[renda  renda in renta_toal]